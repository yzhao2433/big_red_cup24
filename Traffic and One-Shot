{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "ac2e6b60",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import duckdb\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import math\n",
    "import statsmodels.api as sm\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.metrics import precision_score, recall_score, accuracy_score\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.stats import pearsonr"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 325,
   "id": "0b83daf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = pd.read_csv(\"BDC_2024_Womens_Data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 326,
   "id": "62a58262",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Date', 'Home Team', 'Away Team', 'Period', 'Clock',\n",
       "       'Home Team Skaters', 'Away Team Skaters', 'Home Team Goals',\n",
       "       'Away Team Goals', 'Team', 'Player', 'Event', 'X Coordinate',\n",
       "       'Y Coordinate', 'Detail 1', 'Detail 2', 'Detail 3', 'Detail 4',\n",
       "       'Player 2', 'X Coordinate 2', 'Y Coordinate 2'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 326,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ab4a02ee",
   "metadata": {},
   "source": [
    "# Part 3: The Relationship Between Traffic and Scoring a Goal\n",
    "# By Lauren Mok\n",
    "In this portion, we will investigate the relationship between the presence of traffic and scoring a goal, as well as the relationship between one-timers and scoring a goal. Traffic refers to the gathering of many players in one area, usually in front of the net. A one-timer is a shot that occurs when a player meets a teammate's pass with an immediate slapshot, without any attempt to control the puck on their stick. We will first create a dataframe containing the necessary columns: 'Event', 'Detail 3', and 'Detail 4' ('Detail 3' notes the presence or absence of traffic, and 'Detail 4' notes whether or not the shot was a one-timer ). Then, we will prepare the data for analysis by converting the data to binary values. We will proceed by fitting two logistic regression models to the data, each with either traffic or one-timer shot as the only input variable, respectively. The input coefficients generated by the model will be analysed to eludicate the extent to which traffic and one-timer shots influence goal-scoring patterns and their statistical significance in predicting goal outcomes. "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a19186b3",
   "metadata": {},
   "source": [
    "### 3.1 Data Preprocessing"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 327,
   "id": "dc13b9e0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Event</th>\n",
       "      <th>Traffic</th>\n",
       "      <th>One Timer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Goal</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Goal</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Goal</td>\n",
       "      <td>f</td>\n",
       "      <td>t</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Goal</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Shot</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>418</th>\n",
       "      <td>Shot</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>419</th>\n",
       "      <td>Shot</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>420</th>\n",
       "      <td>Shot</td>\n",
       "      <td>t</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>421</th>\n",
       "      <td>Shot</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>422</th>\n",
       "      <td>Shot</td>\n",
       "      <td>f</td>\n",
       "      <td>f</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>423 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Event Traffic One Timer\n",
       "0    Goal       f         f\n",
       "1    Goal       f         f\n",
       "2    Goal       f         t\n",
       "3    Goal       f         f\n",
       "4    Shot       f         f\n",
       "..    ...     ...       ...\n",
       "418  Shot       t         f\n",
       "419  Shot       f         f\n",
       "420  Shot       t         f\n",
       "421  Shot       f         f\n",
       "422  Shot       f         f\n",
       "\n",
       "[423 rows x 3 columns]"
      ]
     },
     "execution_count": 327,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Selecting the relevant columns from the dataframe\n",
    "filtered_data = duckdb.sql(\"\"\"\n",
    "                            SELECT Event, \"Detail 3\", \"Detail 4\"\n",
    "                           FROM data\n",
    "                           WHERE (Event = 'Goal' OR Event = 'Shot')\n",
    "                            \"\"\").df()\n",
    "\n",
    "# Renaming the dataframe columns\n",
    "filtered_data = filtered_data.rename(columns={'Detail 3': 'Traffic', 'Detail 4': 'One Timer'})\n",
    "\n",
    "# Removing rows with NaN values\n",
    "filtered_data = filtered_data.dropna()\n",
    "\n",
    "filtered_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 328,
   "id": "9e08d03e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['f' 't']\n",
      "['f' 't']\n"
     ]
    }
   ],
   "source": [
    "# Checking that 't' and 'f' are the only unique values in 'Traffic' and 'One Timer'\n",
    "print(filtered_data['Traffic'].unique())\n",
    "print(filtered_data['One Timer'].unique())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 329,
   "id": "16ee409d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Event</th>\n",
       "      <th>Traffic</th>\n",
       "      <th>One Timer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Goal</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Goal</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Goal</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Goal</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Shot</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>418</th>\n",
       "      <td>Shot</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>419</th>\n",
       "      <td>Shot</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>420</th>\n",
       "      <td>Shot</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>421</th>\n",
       "      <td>Shot</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>422</th>\n",
       "      <td>Shot</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>423 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    Event  Traffic  One Timer\n",
       "0    Goal        0          0\n",
       "1    Goal        0          0\n",
       "2    Goal        0          1\n",
       "3    Goal        0          0\n",
       "4    Shot        0          0\n",
       "..    ...      ...        ...\n",
       "418  Shot        1          0\n",
       "419  Shot        0          0\n",
       "420  Shot        1          0\n",
       "421  Shot        0          0\n",
       "422  Shot        0          0\n",
       "\n",
       "[423 rows x 3 columns]"
      ]
     },
     "execution_count": 329,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a function that converts 't' to 1 and 'f' to 0\n",
    "def convert_bool(value):\n",
    "    if value == 't':\n",
    "        return 1\n",
    "    else:\n",
    "        assert value == 'f'\n",
    "        return 0\n",
    "    \n",
    "# Applying the function to 'Traffic' and 'One Timer'\n",
    "filtered_data['Traffic'] = filtered_data['Traffic'].apply(convert_bool)\n",
    "filtered_data['One Timer'] = filtered_data['One Timer'].apply(convert_bool)\n",
    "\n",
    "# Printing the dataframe to check that 'Traffic' and 'One Timer' has now been converted to binary values\n",
    "filtered_data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 330,
   "id": "1803fe74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Event</th>\n",
       "      <th>Traffic</th>\n",
       "      <th>One Timer</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>418</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>419</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>420</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>421</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>422</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>423 rows Ã— 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Event  Traffic  One Timer\n",
       "0        1        0          0\n",
       "1        1        0          0\n",
       "2        1        0          1\n",
       "3        1        0          0\n",
       "4        0        0          0\n",
       "..     ...      ...        ...\n",
       "418      0        1          0\n",
       "419      0        0          0\n",
       "420      0        1          0\n",
       "421      0        0          0\n",
       "422      0        0          0\n",
       "\n",
       "[423 rows x 3 columns]"
      ]
     },
     "execution_count": 330,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating a function that converts 'Goal' (successful) to 1 and 'Shot'(unsucessful) to 0.\n",
    "def convert_event(value):\n",
    "    if value == \"Goal\":\n",
    "        return 1\n",
    "    else:\n",
    "        assert value == 'Shot'\n",
    "        return 0\n",
    "    \n",
    "# Applying the function to 'Event'\n",
    "filtered_data['Event'] = filtered_data['Event'].apply(convert_event)\n",
    "\n",
    "filtered_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9af10f47",
   "metadata": {},
   "source": [
    "### 3.2 Analyzing the Statistical Significance of Traffic in Predicting Goal Outcomes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 331,
   "id": "b9e86cdd",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.373779\n",
      "         Iterations 9\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   No. Observations:                  296\n",
      "Model:                          Logit   Df Residuals:                      295\n",
      "Method:                           MLE   Df Model:                            0\n",
      "Date:                Mon, 19 Feb 2024   Pseudo R-squ.:                 -0.8642\n",
      "Time:                        00:00:21   Log-Likelihood:                -110.64\n",
      "converged:                       True   LL-Null:                       -59.348\n",
      "Covariance Type:            nonrobust   LLR p-value:                       nan\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "x1            -4.9698      1.003     -4.953      0.000      -6.937      -3.003\n",
      "==============================================================================\n"
     ]
    }
   ],
   "source": [
    "# Extracting features and target variable\n",
    "X = filtered_data['Traffic'].values\n",
    "y = filtered_data[['Event']].values\n",
    "\n",
    "# Splitting the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Fitting the logistic regression model\n",
    "model = sm.Logit(endog = y_train, exog = X_train).fit()\n",
    "\n",
    "# Print the model summary and identify the input coefficient \n",
    "print (model.summary())"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6d37bb07",
   "metadata": {},
   "source": [
    "From the model summary, we can see that the input variable 'Traffic' has a coefficient of -4.9698, suggesting an inverse relationship between the presence of traffic and scoring a goal. Despite this result being statistically significant, indicated by the p-value of 0, when interpreted within the context of a logistic model, if traffic is present, we expect the odds of a goal being scored to be multiplied by e^(-4.9698), which approximately equals 0.0069. In other words, when traffic is present, the probability of scoring a goal is approximately 0.69%. This implies that the influence of traffic on the likelihood of scoring a goal is quite negligible. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 332,
   "id": "ed070a4d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0.00689655 0.00689655 0.5        0.5        0.5        0.5\n",
      " 0.5        0.00689655 0.00689655 0.00689655 0.5        0.00689655\n",
      " 0.5        0.5        0.5        0.5        0.00689655 0.5\n",
      " 0.5        0.00689655 0.5        0.00689655 0.00689655 0.00689655\n",
      " 0.5        0.5        0.00689655 0.5        0.00689655 0.5\n",
      " 0.00689655 0.5        0.00689655 0.5        0.5        0.5\n",
      " 0.5        0.00689655 0.5        0.5        0.5        0.00689655\n",
      " 0.00689655 0.00689655 0.00689655 0.5        0.5        0.00689655\n",
      " 0.5        0.5        0.00689655 0.00689655 0.5        0.00689655\n",
      " 0.00689655 0.5        0.5        0.5        0.00689655 0.00689655\n",
      " 0.5        0.5        0.5        0.00689655 0.00689655 0.00689655\n",
      " 0.5        0.5        0.00689655 0.00689655 0.5        0.00689655\n",
      " 0.00689655 0.5        0.00689655 0.00689655 0.00689655 0.5\n",
      " 0.00689655 0.00689655 0.00689655 0.00689655 0.00689655 0.5\n",
      " 0.00689655 0.00689655 0.5        0.5        0.00689655 0.00689655\n",
      " 0.00689655 0.00689655 0.5        0.00689655 0.00689655 0.5\n",
      " 0.5        0.5        0.5        0.5        0.00689655 0.5\n",
      " 0.5        0.00689655 0.5        0.5        0.00689655 0.00689655\n",
      " 0.5        0.00689655 0.00689655 0.00689655 0.00689655 0.5\n",
      " 0.5        0.5        0.00689655 0.5        0.5        0.00689655\n",
      " 0.5        0.00689655 0.5        0.5        0.00689655 0.5\n",
      " 0.00689655]\n"
     ]
    }
   ],
   "source": [
    "# Printing the predicted probabilities \n",
    "y_prob = model.predict(X_test)\n",
    "print(y_prob)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "87582ea2",
   "metadata": {},
   "source": [
    "From the predicted probabilities above, we can see that the only two distinct values are 0.00689655 and 0.5. The former value confirms our interpretation of the model's input coffefficient, which is that the probability of scoring a goal is approximately 0.0069 or 0.69%. The latter value suggests that in the absence of traffic, there is a 50% of scoring a goal. To evluate the performance of the model, we will print the accuracy, precision, and recall scores. In order to do so, we must first decide on a threshold for classifying the predictions as positive or negative. It is already apparent that the evaluation metrics will yield limited insights due to the lack of variability in the predicted probabilities. For instance, with a threshold of 0.5, the model will likely struggle to identify true negatives (actual goals scored). However, setting the threshold any higher would lead the model to predict all instances as negatives. Regardless, we will set the threshold to 0.5 to confirm our prediction."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 333,
   "id": "f96020a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.5196850393700787\n",
      "Precision: 0.0625\n",
      "Recall: 0.8\n"
     ]
    }
   ],
   "source": [
    "# Converting probabilities to binary predictions\n",
    "y_pred = np.zeros(len(y_prob))\n",
    "for i in range (len(y_pred)):\n",
    "    if y_prob[i] >= 0.5:\n",
    "        y_pred[i] = 1\n",
    "    else:\n",
    "        y_pred[i] = 0\n",
    "\n",
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "print(\"Recall:\", recall_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "27d7e9fd",
   "metadata": {},
   "source": [
    "As anticipated, the precision score is close to null, as setting a threshold of 0.5 has led to a significant number of false positives. This means that the model has misclassified numerous instances as positive (goal scored) when they were actually negative (no goal scored). "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2bb7c508",
   "metadata": {},
   "source": [
    "### 3.3 Analyzing the Statistical Signifiance of One Timer Shots in Predicting Goal Outcomes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 334,
   "id": "aac73f01",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Optimization terminated successfully.\n",
      "         Current function value: 0.626988\n",
      "         Iterations 6\n",
      "                           Logit Regression Results                           \n",
      "==============================================================================\n",
      "Dep. Variable:                      y   No. Observations:                  296\n",
      "Model:                          Logit   Df Residuals:                      295\n",
      "Method:                           MLE   Df Model:                            0\n",
      "Date:                Mon, 19 Feb 2024   Pseudo R-squ.:                  -2.127\n",
      "Time:                        00:00:21   Log-Likelihood:                -185.59\n",
      "converged:                       True   LL-Null:                       -59.348\n",
      "Covariance Type:            nonrobust   LLR p-value:                       nan\n",
      "==============================================================================\n",
      "                 coef    std err          z      P>|z|      [0.025      0.975]\n",
      "------------------------------------------------------------------------------\n",
      "x1            -2.2407      0.470     -4.763      0.000      -3.163      -1.319\n",
      "==============================================================================\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([0.5       , 0.5       , 0.5       , 0.09615385, 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.09615385, 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n",
       "       0.5       , 0.09615385, 0.5       , 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.09615385, 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n",
       "       0.5       , 0.09615385, 0.5       , 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.09615385,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.09615385, 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.09615385, 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.09615385, 0.09615385, 0.5       ,\n",
       "       0.5       , 0.5       , 0.09615385, 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.09615385, 0.5       ,\n",
       "       0.5       , 0.5       , 0.09615385, 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.09615385, 0.09615385, 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n",
       "       0.09615385, 0.5       , 0.5       , 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.09615385,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       , 0.5       , 0.5       , 0.09615385,\n",
       "       0.09615385, 0.5       , 0.09615385, 0.5       , 0.5       ,\n",
       "       0.5       , 0.5       ])"
      ]
     },
     "execution_count": 334,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Extracting features and target variable\n",
    "X = filtered_data[['One Timer']].values\n",
    "y = filtered_data['Event'].values\n",
    "\n",
    "# Splitting the data into training and testing sets\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n",
    "\n",
    "# Fitting the logistic regression model\n",
    "model = sm.Logit(endog = y_train, exog = X_train).fit()\n",
    "print (model.summary())\n",
    "\n",
    "y_prob = model.predict(X_test)\n",
    "\n",
    "# coefficient is not big enough to make a different in the predicted value for y\n",
    "# therefore, although the model has a coefficent of -4.6347, it converts to approximately\n",
    "# 0.0097 in probability of the goal being scored. So although this result is significant,\n",
    "# there is not a huge impact on whether there is traffic on whether the goal is made.\n",
    "\n",
    "y_pred = np.zeros(len(y_prob))\n",
    "for i in range (len(y_pred)):\n",
    "    if y_prob[i] >= 0.5:\n",
    "        y_pred[i] = 1\n",
    "    else:\n",
    "        y_pred[i] = 0\n",
    "y_prob"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 335,
   "id": "94af3fb4",
   "metadata": {},
   "outputs": [],
   "source": [
    "model_2 = LogisticRegression().fit(X, y)\n",
    "model_2.coef_\n",
    "\n",
    "predicted_y = model_2.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 336,
   "id": "adc2cd0a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy: 0.1968503937007874\n",
      "Precision: 0.04672897196261682\n",
      "Recall: 1.0\n"
     ]
    }
   ],
   "source": [
    "print(\"Accuracy:\", accuracy_score(y_test, y_pred))\n",
    "print(\"Precision:\", precision_score(y_test, y_pred))\n",
    "print(\"Recall:\", recall_score(y_test, y_pred))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "38779956",
   "metadata": {},
   "source": [
    "## Part 4: Do teams that win more faceoffs tend to win games more often?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 337,
   "id": "997db40c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Period</th>\n",
       "      <th>Clock</th>\n",
       "      <th>Home Team Goals</th>\n",
       "      <th>Away Team Goals</th>\n",
       "      <th>Team</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2023-11-08</td>\n",
       "      <td>1</td>\n",
       "      <td>20:00</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Women - Canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2023-11-08</td>\n",
       "      <td>1</td>\n",
       "      <td>14:10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Women - United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2023-11-08</td>\n",
       "      <td>1</td>\n",
       "      <td>13:50</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Women - United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2023-11-08</td>\n",
       "      <td>1</td>\n",
       "      <td>12:45</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Women - United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2023-11-08</td>\n",
       "      <td>1</td>\n",
       "      <td>12:10</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>Women - United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>204</th>\n",
       "      <td>2023-12-16</td>\n",
       "      <td>3</td>\n",
       "      <td>3:05</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Women - United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>205</th>\n",
       "      <td>2023-12-16</td>\n",
       "      <td>3</td>\n",
       "      <td>0:20</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Women - United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>206</th>\n",
       "      <td>2023-12-16</td>\n",
       "      <td>4</td>\n",
       "      <td>5:00</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Women - United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>207</th>\n",
       "      <td>2023-12-16</td>\n",
       "      <td>4</td>\n",
       "      <td>3:54</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Women - United States</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>208</th>\n",
       "      <td>2023-12-16</td>\n",
       "      <td>4</td>\n",
       "      <td>1:16</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>Women - United States</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>209 rows Ã— 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           Date  Period  Clock  Home Team Goals  Away Team Goals  \\\n",
       "0    2023-11-08       1  20:00                0                0   \n",
       "1    2023-11-08       1  14:10                0                0   \n",
       "2    2023-11-08       1  13:50                0                0   \n",
       "3    2023-11-08       1  12:45                0                0   \n",
       "4    2023-11-08       1  12:10                0                0   \n",
       "..          ...     ...    ...              ...              ...   \n",
       "204  2023-12-16       3   3:05                2                2   \n",
       "205  2023-12-16       3   0:20                2                2   \n",
       "206  2023-12-16       4   5:00                2                2   \n",
       "207  2023-12-16       4   3:54                2                2   \n",
       "208  2023-12-16       4   1:16                2                2   \n",
       "\n",
       "                      Team  \n",
       "0           Women - Canada  \n",
       "1    Women - United States  \n",
       "2    Women - United States  \n",
       "3    Women - United States  \n",
       "4    Women - United States  \n",
       "..                     ...  \n",
       "204  Women - United States  \n",
       "205  Women - United States  \n",
       "206  Women - United States  \n",
       "207  Women - United States  \n",
       "208  Women - United States  \n",
       "\n",
       "[209 rows x 6 columns]"
      ]
     },
     "execution_count": 337,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "faceoff_df = duckdb.sql(\"\"\"\n",
    "                   SELECT Date, Period, Clock, \"Home Team Goals\", \"Away Team Goals\", Team\n",
    "                   FROM data\n",
    "                   WHERE (Event = 'Faceoff Win')\n",
    "                  \"\"\").df()\n",
    "faceoff_df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 338,
   "id": "8c51e16a",
   "metadata": {},
   "outputs": [],
   "source": [
    "grouped_by_game = faceoff_df.groupby(['Date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 339,
   "id": "d9b8b1e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "('2023-11-08',)\n",
      "          Date  Period  Clock  Home Team Goals  Away Team Goals  \\\n",
      "0   2023-11-08       1  20:00                0                0   \n",
      "1   2023-11-08       1  14:10                0                0   \n",
      "2   2023-11-08       1  13:50                0                0   \n",
      "3   2023-11-08       1  12:45                0                0   \n",
      "4   2023-11-08       1  12:10                0                0   \n",
      "5   2023-11-08       1  11:29                0                0   \n",
      "6   2023-11-08       1  10:40                0                0   \n",
      "7   2023-11-08       1  10:05                0                0   \n",
      "8   2023-11-08       1   8:18                0                0   \n",
      "9   2023-11-08       1   8:05                0                0   \n",
      "10  2023-11-08       1   7:33                0                0   \n",
      "11  2023-11-08       1   5:39                0                0   \n",
      "12  2023-11-08       1   3:40                0                0   \n",
      "13  2023-11-08       1   3:03                0                0   \n",
      "14  2023-11-08       1   2:34                0                0   \n",
      "15  2023-11-08       1   0:08                1                0   \n",
      "16  2023-11-08       2  20:00                1                0   \n",
      "17  2023-11-08       2  19:52                1                0   \n",
      "18  2023-11-08       2  19:37                1                0   \n",
      "19  2023-11-08       2  19:19                1                0   \n",
      "20  2023-11-08       2  17:41                1                0   \n",
      "21  2023-11-08       2  16:55                1                0   \n",
      "22  2023-11-08       2  16:31                1                0   \n",
      "23  2023-11-08       2  15:59                1                0   \n",
      "24  2023-11-08       2  15:11                1                0   \n",
      "25  2023-11-08       2  13:47                1                0   \n",
      "26  2023-11-08       2  12:20                1                0   \n",
      "27  2023-11-08       2  11:25                1                0   \n",
      "28  2023-11-08       2   9:41                1                0   \n",
      "29  2023-11-08       2   7:18                1                1   \n",
      "30  2023-11-08       2   4:29                1                1   \n",
      "31  2023-11-08       2   3:37                1                1   \n",
      "32  2023-11-08       2   3:30                1                1   \n",
      "33  2023-11-08       2   1:28                1                1   \n",
      "34  2023-11-08       3  20:00                1                1   \n",
      "35  2023-11-08       3  19:28                1                1   \n",
      "36  2023-11-08       3  17:57                1                1   \n",
      "37  2023-11-08       3  17:27                1                1   \n",
      "38  2023-11-08       3  16:49                1                1   \n",
      "39  2023-11-08       3  16:32                2                1   \n",
      "40  2023-11-08       3  14:03                2                1   \n",
      "41  2023-11-08       3  13:55                2                1   \n",
      "42  2023-11-08       3  13:33                2                1   \n",
      "43  2023-11-08       3  12:10                2                1   \n",
      "44  2023-11-08       3  11:54                2                1   \n",
      "45  2023-11-08       3   9:53                2                1   \n",
      "46  2023-11-08       3   8:00                2                1   \n",
      "47  2023-11-08       3   7:10                2                1   \n",
      "48  2023-11-08       3   5:19                2                1   \n",
      "49  2023-11-08       3   4:30                2                1   \n",
      "50  2023-11-08       3   1:20                3                1   \n",
      "51  2023-11-08       3   0:51                3                1   \n",
      "\n",
      "                     Team  \n",
      "0          Women - Canada  \n",
      "1   Women - United States  \n",
      "2   Women - United States  \n",
      "3   Women - United States  \n",
      "4   Women - United States  \n",
      "5          Women - Canada  \n",
      "6   Women - United States  \n",
      "7   Women - United States  \n",
      "8   Women - United States  \n",
      "9   Women - United States  \n",
      "10  Women - United States  \n",
      "11         Women - Canada  \n",
      "12  Women - United States  \n",
      "13         Women - Canada  \n",
      "14         Women - Canada  \n",
      "15  Women - United States  \n",
      "16         Women - Canada  \n",
      "17         Women - Canada  \n",
      "18  Women - United States  \n",
      "19  Women - United States  \n",
      "20         Women - Canada  \n",
      "21  Women - United States  \n",
      "22         Women - Canada  \n",
      "23  Women - United States  \n",
      "24         Women - Canada  \n",
      "25         Women - Canada  \n",
      "26  Women - United States  \n",
      "27  Women - United States  \n",
      "28  Women - United States  \n",
      "29  Women - United States  \n",
      "30         Women - Canada  \n",
      "31  Women - United States  \n",
      "32  Women - United States  \n",
      "33  Women - United States  \n",
      "34         Women - Canada  \n",
      "35  Women - United States  \n",
      "36         Women - Canada  \n",
      "37         Women - Canada  \n",
      "38         Women - Canada  \n",
      "39  Women - United States  \n",
      "40  Women - United States  \n",
      "41  Women - United States  \n",
      "42         Women - Canada  \n",
      "43         Women - Canada  \n",
      "44  Women - United States  \n",
      "45  Women - United States  \n",
      "46         Women - Canada  \n",
      "47         Women - Canada  \n",
      "48  Women - United States  \n",
      "49  Women - United States  \n",
      "50         Women - Canada  \n",
      "51         Women - Canada  \n",
      "('2023-11-11',)\n",
      "           Date  Period  Clock  Home Team Goals  Away Team Goals  \\\n",
      "52   2023-11-11       1  20:00                0                0   \n",
      "53   2023-11-11       1  19:01                0                0   \n",
      "54   2023-11-11       1  18:36                0                0   \n",
      "55   2023-11-11       1  11:11                0                0   \n",
      "56   2023-11-11       1   8:31                0                0   \n",
      "57   2023-11-11       1   4:37                0                0   \n",
      "58   2023-11-11       1   3:37                0                0   \n",
      "59   2023-11-11       1   2:41                1                0   \n",
      "60   2023-11-11       1   2:01                1                0   \n",
      "61   2023-11-11       1   1:39                1                0   \n",
      "62   2023-11-11       1   1:30                1                0   \n",
      "63   2023-11-11       2  20:00                1                0   \n",
      "64   2023-11-11       2  19:33                1                0   \n",
      "65   2023-11-11       2  18:42                1                0   \n",
      "66   2023-11-11       2  17:52                1                1   \n",
      "67   2023-11-11       2  17:02                1                1   \n",
      "68   2023-11-11       2  15:52                1                1   \n",
      "69   2023-11-11       2  15:20                1                1   \n",
      "70   2023-11-11       2  13:50                1                1   \n",
      "71   2023-11-11       2  13:41                1                1   \n",
      "72   2023-11-11       2  12:02                1                1   \n",
      "73   2023-11-11       2  11:04                1                1   \n",
      "74   2023-11-11       2   9:07                1                1   \n",
      "75   2023-11-11       2   8:46                1                1   \n",
      "76   2023-11-11       2   8:21                1                1   \n",
      "77   2023-11-11       2   8:09                2                1   \n",
      "78   2023-11-11       2   7:59                2                1   \n",
      "79   2023-11-11       2   7:37                2                1   \n",
      "80   2023-11-11       2   5:03                2                1   \n",
      "81   2023-11-11       2   4:27                2                1   \n",
      "82   2023-11-11       2   4:12                3                1   \n",
      "83   2023-11-11       2   3:42                3                1   \n",
      "84   2023-11-11       2   1:45                3                1   \n",
      "85   2023-11-11       2   1:15                3                1   \n",
      "86   2023-11-11       2   0:23                3                1   \n",
      "87   2023-11-11       3  20:00                3                1   \n",
      "88   2023-11-11       3  17:23                3                2   \n",
      "89   2023-11-11       3  17:16                3                2   \n",
      "90   2023-11-11       3  16:54                3                2   \n",
      "91   2023-11-11       3  16:41                4                2   \n",
      "92   2023-11-11       3  15:51                4                2   \n",
      "93   2023-11-11       3   9:45                4                2   \n",
      "94   2023-11-11       3   8:19                4                2   \n",
      "95   2023-11-11       3   7:29                4                2   \n",
      "96   2023-11-11       3   5:37                5                2   \n",
      "97   2023-11-11       3   5:17                5                2   \n",
      "98   2023-11-11       3   5:00                5                2   \n",
      "99   2023-11-11       3   4:52                5                2   \n",
      "100  2023-11-11       3   1:07                5                2   \n",
      "101  2023-11-11       3   0:56                5                2   \n",
      "\n",
      "                      Team  \n",
      "52          Women - Canada  \n",
      "53   Women - United States  \n",
      "54          Women - Canada  \n",
      "55          Women - Canada  \n",
      "56          Women - Canada  \n",
      "57          Women - Canada  \n",
      "58   Women - United States  \n",
      "59          Women - Canada  \n",
      "60   Women - United States  \n",
      "61   Women - United States  \n",
      "62   Women - United States  \n",
      "63          Women - Canada  \n",
      "64          Women - Canada  \n",
      "65          Women - Canada  \n",
      "66   Women - United States  \n",
      "67          Women - Canada  \n",
      "68          Women - Canada  \n",
      "69   Women - United States  \n",
      "70          Women - Canada  \n",
      "71          Women - Canada  \n",
      "72          Women - Canada  \n",
      "73          Women - Canada  \n",
      "74          Women - Canada  \n",
      "75   Women - United States  \n",
      "76   Women - United States  \n",
      "77   Women - United States  \n",
      "78   Women - United States  \n",
      "79   Women - United States  \n",
      "80          Women - Canada  \n",
      "81          Women - Canada  \n",
      "82   Women - United States  \n",
      "83          Women - Canada  \n",
      "84   Women - United States  \n",
      "85   Women - United States  \n",
      "86          Women - Canada  \n",
      "87   Women - United States  \n",
      "88          Women - Canada  \n",
      "89   Women - United States  \n",
      "90   Women - United States  \n",
      "91          Women - Canada  \n",
      "92   Women - United States  \n",
      "93   Women - United States  \n",
      "94   Women - United States  \n",
      "95   Women - United States  \n",
      "96          Women - Canada  \n",
      "97   Women - United States  \n",
      "98          Women - Canada  \n",
      "99          Women - Canada  \n",
      "100  Women - United States  \n",
      "101  Women - United States  \n",
      "('2023-12-14',)\n",
      "           Date  Period  Clock  Home Team Goals  Away Team Goals  \\\n",
      "102  2023-12-14       1  20:00                0                0   \n",
      "103  2023-12-14       1  19:54                0                0   \n",
      "104  2023-12-14       1  19:18                0                0   \n",
      "105  2023-12-14       1  17:22                0                0   \n",
      "106  2023-12-14       1  16:38                0                0   \n",
      "107  2023-12-14       1  16:06                0                0   \n",
      "108  2023-12-14       1  13:08                0                0   \n",
      "109  2023-12-14       1  12:24                1                0   \n",
      "110  2023-12-14       1  11:31                1                0   \n",
      "111  2023-12-14       1   7:45                1                0   \n",
      "112  2023-12-14       1   7:14                1                0   \n",
      "113  2023-12-14       1   6:13                1                0   \n",
      "114  2023-12-14       1   3:50                1                1   \n",
      "115  2023-12-14       1   2:48                1                2   \n",
      "116  2023-12-14       1   2:35                1                2   \n",
      "117  2023-12-14       1   2:29                1                2   \n",
      "118  2023-12-14       1   2:19                1                2   \n",
      "119  2023-12-14       1   1:11                1                2   \n",
      "120  2023-12-14       2  20:00                1                2   \n",
      "121  2023-12-14       2  18:55                1                2   \n",
      "122  2023-12-14       2  17:10                1                2   \n",
      "123  2023-12-14       2  13:33                1                2   \n",
      "124  2023-12-14       2  13:03                2                2   \n",
      "125  2023-12-14       2  12:44                2                2   \n",
      "126  2023-12-14       2  12:33                2                2   \n",
      "127  2023-12-14       2   9:01                2                2   \n",
      "128  2023-12-14       2   8:15                2                2   \n",
      "129  2023-12-14       2   7:16                2                2   \n",
      "130  2023-12-14       2   7:08                2                2   \n",
      "131  2023-12-14       2   3:59                2                2   \n",
      "132  2023-12-14       2   1:42                2                2   \n",
      "133  2023-12-14       2   0:41                2                2   \n",
      "134  2023-12-14       2   0:35                2                2   \n",
      "135  2023-12-14       3  20:00                2                2   \n",
      "136  2023-12-14       3  18:35                2                2   \n",
      "137  2023-12-14       3  16:07                2                2   \n",
      "138  2023-12-14       3  15:13                2                2   \n",
      "139  2023-12-14       3  13:38                2                2   \n",
      "140  2023-12-14       3  13:27                2                2   \n",
      "141  2023-12-14       3  11:16                2                2   \n",
      "142  2023-12-14       3  10:51                2                2   \n",
      "143  2023-12-14       3   6:31                2                2   \n",
      "144  2023-12-14       3   6:14                2                2   \n",
      "145  2023-12-14       3   4:10                2                2   \n",
      "146  2023-12-14       3   1:06                2                2   \n",
      "147  2023-12-14       3   0:24                2                2   \n",
      "148  2023-12-14       4   5:00                2                2   \n",
      "\n",
      "                      Team  \n",
      "102         Women - Canada  \n",
      "103         Women - Canada  \n",
      "104  Women - United States  \n",
      "105         Women - Canada  \n",
      "106  Women - United States  \n",
      "107  Women - United States  \n",
      "108  Women - United States  \n",
      "109  Women - United States  \n",
      "110         Women - Canada  \n",
      "111         Women - Canada  \n",
      "112         Women - Canada  \n",
      "113  Women - United States  \n",
      "114         Women - Canada  \n",
      "115         Women - Canada  \n",
      "116         Women - Canada  \n",
      "117  Women - United States  \n",
      "118         Women - Canada  \n",
      "119         Women - Canada  \n",
      "120  Women - United States  \n",
      "121         Women - Canada  \n",
      "122         Women - Canada  \n",
      "123  Women - United States  \n",
      "124         Women - Canada  \n",
      "125         Women - Canada  \n",
      "126         Women - Canada  \n",
      "127         Women - Canada  \n",
      "128  Women - United States  \n",
      "129  Women - United States  \n",
      "130  Women - United States  \n",
      "131         Women - Canada  \n",
      "132         Women - Canada  \n",
      "133         Women - Canada  \n",
      "134         Women - Canada  \n",
      "135         Women - Canada  \n",
      "136         Women - Canada  \n",
      "137  Women - United States  \n",
      "138         Women - Canada  \n",
      "139  Women - United States  \n",
      "140  Women - United States  \n",
      "141         Women - Canada  \n",
      "142         Women - Canada  \n",
      "143         Women - Canada  \n",
      "144  Women - United States  \n",
      "145         Women - Canada  \n",
      "146  Women - United States  \n",
      "147  Women - United States  \n",
      "148  Women - United States  \n",
      "('2023-12-16',)\n",
      "           Date  Period  Clock  Home Team Goals  Away Team Goals  \\\n",
      "149  2023-12-16       1  20:00                0                0   \n",
      "150  2023-12-16       1  19:13                0                0   \n",
      "151  2023-12-16       1  17:17                0                0   \n",
      "152  2023-12-16       1  17:00                0                0   \n",
      "153  2023-12-16       1  16:06                0                0   \n",
      "154  2023-12-16       1  15:48                0                0   \n",
      "155  2023-12-16       1  15:20                0                0   \n",
      "156  2023-12-16       1  13:59                0                0   \n",
      "157  2023-12-16       1  13:46                0                0   \n",
      "158  2023-12-16       1  10:57                0                0   \n",
      "159  2023-12-16       1  10:20                0                0   \n",
      "160  2023-12-16       1  10:09                0                0   \n",
      "161  2023-12-16       1   8:57                0                0   \n",
      "162  2023-12-16       1   8:34                0                0   \n",
      "163  2023-12-16       1   7:09                0                0   \n",
      "164  2023-12-16       1   6:32                0                0   \n",
      "165  2023-12-16       1   5:50                0                0   \n",
      "166  2023-12-16       1   5:30                0                0   \n",
      "167  2023-12-16       1   3:26                0                0   \n",
      "168  2023-12-16       1   2:11                0                0   \n",
      "169  2023-12-16       1   1:35                0                0   \n",
      "170  2023-12-16       1   1:16                0                0   \n",
      "171  2023-12-16       1   1:12                0                0   \n",
      "172  2023-12-16       2  20:00                0                0   \n",
      "173  2023-12-16       2  16:42                0                0   \n",
      "174  2023-12-16       2  16:30                0                0   \n",
      "175  2023-12-16       2  14:25                0                0   \n",
      "176  2023-12-16       2  13:27                0                0   \n",
      "177  2023-12-16       2  12:55                0                0   \n",
      "178  2023-12-16       2  12:11                0                0   \n",
      "179  2023-12-16       2  11:41                0                1   \n",
      "180  2023-12-16       2   9:07                0                1   \n",
      "181  2023-12-16       2   8:54                0                1   \n",
      "182  2023-12-16       2   8:39                0                1   \n",
      "183  2023-12-16       2   6:07                0                1   \n",
      "184  2023-12-16       2   5:16                0                1   \n",
      "185  2023-12-16       2   4:01                0                1   \n",
      "186  2023-12-16       2   3:46                0                1   \n",
      "187  2023-12-16       2   2:59                0                1   \n",
      "188  2023-12-16       2   2:40                0                1   \n",
      "189  2023-12-16       2   1:13                0                1   \n",
      "190  2023-12-16       2   0:13                0                1   \n",
      "191  2023-12-16       3  20:00                0                1   \n",
      "192  2023-12-16       3  16:09                0                1   \n",
      "193  2023-12-16       3  15:52                0                1   \n",
      "194  2023-12-16       3  15:14                0                2   \n",
      "195  2023-12-16       3  13:54                0                2   \n",
      "196  2023-12-16       3  13:36                0                2   \n",
      "197  2023-12-16       3  13:23                0                2   \n",
      "198  2023-12-16       3  12:22                0                2   \n",
      "199  2023-12-16       3  11:35                0                2   \n",
      "200  2023-12-16       3   9:54                1                2   \n",
      "201  2023-12-16       3   9:36                1                2   \n",
      "202  2023-12-16       3   7:21                2                2   \n",
      "203  2023-12-16       3   5:32                2                2   \n",
      "204  2023-12-16       3   3:05                2                2   \n",
      "205  2023-12-16       3   0:20                2                2   \n",
      "206  2023-12-16       4   5:00                2                2   \n",
      "207  2023-12-16       4   3:54                2                2   \n",
      "208  2023-12-16       4   1:16                2                2   \n",
      "\n",
      "                      Team  \n",
      "149         Women - Canada  \n",
      "150  Women - United States  \n",
      "151  Women - United States  \n",
      "152  Women - United States  \n",
      "153  Women - United States  \n",
      "154  Women - United States  \n",
      "155  Women - United States  \n",
      "156  Women - United States  \n",
      "157         Women - Canada  \n",
      "158  Women - United States  \n",
      "159  Women - United States  \n",
      "160         Women - Canada  \n",
      "161         Women - Canada  \n",
      "162  Women - United States  \n",
      "163  Women - United States  \n",
      "164  Women - United States  \n",
      "165         Women - Canada  \n",
      "166         Women - Canada  \n",
      "167  Women - United States  \n",
      "168  Women - United States  \n",
      "169  Women - United States  \n",
      "170  Women - United States  \n",
      "171         Women - Canada  \n",
      "172         Women - Canada  \n",
      "173  Women - United States  \n",
      "174  Women - United States  \n",
      "175         Women - Canada  \n",
      "176  Women - United States  \n",
      "177         Women - Canada  \n",
      "178         Women - Canada  \n",
      "179         Women - Canada  \n",
      "180  Women - United States  \n",
      "181         Women - Canada  \n",
      "182  Women - United States  \n",
      "183  Women - United States  \n",
      "184  Women - United States  \n",
      "185         Women - Canada  \n",
      "186  Women - United States  \n",
      "187  Women - United States  \n",
      "188  Women - United States  \n",
      "189         Women - Canada  \n",
      "190  Women - United States  \n",
      "191  Women - United States  \n",
      "192         Women - Canada  \n",
      "193  Women - United States  \n",
      "194  Women - United States  \n",
      "195         Women - Canada  \n",
      "196  Women - United States  \n",
      "197         Women - Canada  \n",
      "198         Women - Canada  \n",
      "199  Women - United States  \n",
      "200  Women - United States  \n",
      "201  Women - United States  \n",
      "202  Women - United States  \n",
      "203         Women - Canada  \n",
      "204  Women - United States  \n",
      "205  Women - United States  \n",
      "206  Women - United States  \n",
      "207  Women - United States  \n",
      "208  Women - United States  \n"
     ]
    }
   ],
   "source": [
    "for game, data in grouped_by_game:\n",
    "    print(game)\n",
    "    print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 340,
   "id": "23702757",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Date: ('2023-11-08',), Faceoff Wins USA: 30, Faceoff Wins Canada: 22\n",
      "Date: ('2023-11-11',), Faceoff Wins USA: 25, Faceoff Wins Canada: 25\n",
      "Date: ('2023-12-14',), Faceoff Wins USA: 19, Faceoff Wins Canada: 28\n",
      "Date: ('2023-12-16',), Faceoff Wins USA: 40, Faceoff Wins Canada: 20\n",
      "Total Faceoff Wins USA: 114\n",
      "Total Faceoff Wins Canada: 95\n"
     ]
    }
   ],
   "source": [
    "total_faceoff_wins_usa = 0\n",
    "total_faceoff_wins_canada = 0\n",
    "\n",
    "\n",
    "for date, game in grouped_by_game:\n",
    "    faceoff_wins_usa = (game['Team'] == 'Women - United States').sum()\n",
    "    faceoff_wins_canada = (game['Team'] == 'Women - Canada').sum()    \n",
    "\n",
    "    total_faceoff_wins_usa += faceoff_wins_usa\n",
    "    total_faceoff_wins_canada += faceoff_wins_canada\n",
    "\n",
    "    print(f\"Date: {date}, Faceoff Wins USA: {faceoff_wins_usa}, Faceoff Wins Canada: {faceoff_wins_canada}\")\n",
    "    \n",
    "print(f\"Total Faceoff Wins USA: {total_faceoff_wins_usa}\")\n",
    "print(f\"Total Faceoff Wins Canada: {total_faceoff_wins_canada}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 341,
   "id": "627cf824",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Win Percentage for Women's United States: 50.0\n",
      "Win Percentage for Women's Canada: 0.0\n",
      "Tie Percentage: 50.0\n",
      "Faceoff Win Percentage for Women's United States: 54.54545454545454\n",
      "Faceoff Win Percentage for Women's Canada: 45.45454545454545\n"
     ]
    }
   ],
   "source": [
    "wins_usa = 0\n",
    "wins_canada = 0\n",
    "ties = 0\n",
    "\n",
    "# Iterate through each game group\n",
    "for date, game_group in grouped_by_game:\n",
    "    # Determine the outcome of the game\n",
    "    last_row = game_group.iloc[-1]  # Access the last row of the group\n",
    "    goals_usa = last_row['Home Team Goals']\n",
    "    goals_canada = last_row['Away Team Goals']\n",
    "    \n",
    "    if goals_usa > goals_canada:\n",
    "        wins_usa += 1\n",
    "    elif goals_usa < goals_canada:\n",
    "        wins_canada += 1\n",
    "    else:\n",
    "        ties += 1\n",
    "\n",
    "total_games = wins_usa + wins_canada + ties\n",
    "\n",
    "# Calculate the win percentage for each team\n",
    "win_percentage_usa = (wins_usa / total_games) * 100\n",
    "win_percentage_canada = (wins_canada / total_games) * 100\n",
    "tie_percentage = (ties/total_games) * 100\n",
    "\n",
    "# Calculate the faceoff win percentage for each team\n",
    "total_faceoff_wins = total_faceoff_wins_usa + total_faceoff_wins_canada\n",
    "faceoff_win_percentage_usa = (total_faceoff_wins_usa / total_faceoff_wins) * 100\n",
    "faceoff_win_percentage_canada = (total_faceoff_wins_canada / total_faceoff_wins) * 100\n",
    "\n",
    "# Perform correlation analysis to determine if there is a correlation between win percentage and faceoff win percentage\n",
    "\n",
    "print(\"Win Percentage for Women's United States:\", win_percentage_usa)\n",
    "print(\"Win Percentage for Women's Canada:\", win_percentage_canada)\n",
    "print(\"Tie Percentage:\", tie_percentage)\n",
    "print(\"Faceoff Win Percentage for Women's United States:\", faceoff_win_percentage_usa)\n",
    "print(\"Faceoff Win Percentage for Women's Canada:\", faceoff_win_percentage_canada)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 342,
   "id": "0287c94b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Pearson correlation coefficient: 1.0\n",
      "P-value: 1.0\n"
     ]
    }
   ],
   "source": [
    "win_percentages = np.array([win_percentage_usa, win_percentage_canada])\n",
    "faceoff_win_percentages = np.array([faceoff_win_percentage_usa, faceoff_win_percentage_canada])\n",
    "\n",
    "# Perform Pearson correlation analysis\n",
    "correlation_coefficient, p_value = pearsonr(win_percentages, faceoff_win_percentages)\n",
    "\n",
    "print(\"Pearson correlation coefficient:\", correlation_coefficient)\n",
    "print(\"P-value:\", p_value)"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.1.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
